{
	"info": {
		"_postman_id": "ab1c4f01-3a05-46b5-a657-7aa4d52aee7c",
		"name": "Book_Case_Service_ItTest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "getBookByReference",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Book_Found\",()=>{\r",
							"pm.response.to.have.status(200);\r",
							"}); \r",
							"pm.test(\"Book found is the expected one\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.kind).to.eql('A_Kind');\r",
							"    pm.expect(responseJson.title).to.eql('A_Book');\r",
							"    pm.expect(responseJson.author).to.eql('A_author');\r",
							"    pm.expect(responseJson.availability).is.true;  \r",
							"    pm.expect(responseJson.numberOfReservations).is.null; \r",
							"    pm.expect(responseJson.libraryBuilding.id).is.eql(3); \r",
							"    pm.expect(responseJson.libraryBuilding.name).is.eql('bibliothèque_est');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:9101/getBookByReference?reference=1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9101",
					"path": [
						"getBookByReference"
					],
					"query": [
						{
							"key": "reference",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getBookByReferenceFail",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Book_NotFound\",  ()=> {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:9101/getBookByReference?reference=100",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9101",
					"path": [
						"getBookByReference"
					],
					"query": [
						{
							"key": "reference",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "kinds",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Kinds\",()=>{\r",
							" pm.response.to.have.status(200);\r",
							"}); \r",
							"pm.test(\"The response has all properties\", () => {\r",
							"    //parse the response json and test three properties\r",
							"   const responseArray = pm.response.json();\r",
							"   pm.expect(responseArray[0].kind).to.eql('A_Kind');\r",
							"});\r",
							"\r",
							"\r",
							" \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:9101/kinds",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9101",
					"path": [
						"kinds"
					]
				}
			},
			"response": []
		},
		{
			"name": "books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"All_Books_Found\",()=>{\r",
							"pm.response.to.have.status(200);\r",
							"}); \r",
							"pm.test('Books_List_Size',()=>{\r",
							"pm.checkSize = pm.response.json();\r",
							"pm.expect(pm.checkSize.length).to.eql(16);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:9101/books?maxReservationNumber=2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9101",
					"path": [
						"books"
					],
					"query": [
						{
							"key": "maxReservationNumber",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "BuildingFiltered",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"All_Books_Found\",()=>{\r",
							"pm.response.to.have.status(200);\r",
							"}); \r",
							"pm.test(\"check_Building\",()=>{\r",
							"pm.books = pm.response.json();\r",
							"for(i=0;i<pm.books.length;i++){    \r",
							"    pm.expect(pm.books[i].libraryBuildingName).to.eql(\"bibliothèque_sud\");\r",
							"}\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:9101/buildingFiltered?libraryBuilding=2&maxReservationNumber=2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9101",
					"path": [
						"buildingFiltered"
					],
					"query": [
						{
							"key": "libraryBuilding",
							"value": "2"
						},
						{
							"key": "maxReservationNumber",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "kindsFiltered",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"All_Books_Found\",()=>{\r",
							"pm.response.to.have.status(200);\r",
							"}); \r",
							"pm.test(\"check_Building\",()=>{\r",
							"pm.books = pm.response.json();\r",
							"for(i=0;i<pm.books.length;i++){    \r",
							"    pm.expect(pm.books[i].kind).to.eql(\"A_Kind\");\r",
							"}\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:9101/kindsFiltered?kinds=A_Kind&maxReservationNumber=2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9101",
					"path": [
						"kindsFiltered"
					],
					"query": [
						{
							"key": "kinds",
							"value": "A_Kind"
						},
						{
							"key": "maxReservationNumber",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "buildingAndKindsFiltered",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"All_Books_Found\",()=>{\r",
							"pm.response.to.have.status(200);\r",
							"}); \r",
							"pm.test(\"check_Building\",()=>{\r",
							"pm.books = pm.response.json();\r",
							"for(i=0;i<pm.books.length;i++){    \r",
							"    pm.expect(pm.books[i].kind).to.eql(\"A_Kind\");\r",
							"    pm.expect(pm.books[i].libraryBuildingName).to.eql(\"bibliothèque_est\");\r",
							"}\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:9101/buildingAndKindsFiltered?kinds=A_Kind&maxReservationNumber=2&libraryBuilding=3",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9101",
					"path": [
						"buildingAndKindsFiltered"
					],
					"query": [
						{
							"key": "kinds",
							"value": "A_Kind"
						},
						{
							"key": "maxReservationNumber",
							"value": "2"
						},
						{
							"key": "libraryBuilding",
							"value": "3"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "reservableBookExamplaries",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"reservableBookExamplaries\",()=>{\r",
							"pm.response.to.have.status(200);\r",
							"}); \r",
							"pm.test(\"Check size\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.length).to.eql(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:9101/reservableBookExamplaries?buildingName=bibliothèque_nord&maxOfReservation=2&title=C_Book",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9101",
					"path": [
						"reservableBookExamplaries"
					],
					"query": [
						{
							"key": "buildingName",
							"value": "bibliothèque_nord"
						},
						{
							"key": "maxOfReservation",
							"value": "2"
						},
						{
							"key": "title",
							"value": "C_Book"
						}
					]
				}
			},
			"response": []
		}
	]
}